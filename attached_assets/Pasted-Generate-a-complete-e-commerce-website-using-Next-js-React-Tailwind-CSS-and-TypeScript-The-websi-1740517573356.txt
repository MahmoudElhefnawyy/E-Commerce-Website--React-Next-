Generate a complete e-commerce website using Next.js, React, Tailwind CSS, and TypeScript. The website should include the following features and components:**

1. Project Setup:
   - Create a Next.js project with TypeScript and Tailwind CSS preconfigured.
   - Include ESLint and Prettier for code linting and formatting.

2. Pages:
   - Homepage: Display featured products, a hero banner, and a call-to-action button.
   - Product Listing Page: Show all products in a grid layout with filters (e.g., by category, price range).
   - Product Detail Page: Display detailed information about a single product, including images, description, price, and an "Add to Cart" button.
   - Cart Page: Show a list of items in the cart, their quantities, and total price. Include options to update quantities or remove items.
   - Checkout Page: Collect user information (name, address, payment details) and integrate a payment gateway (e.g., Stripe or PayPal).
   - About Us Page: Provide information about the company.
   - Contact Page: Include a contact form and company contact details.

3. Components:
   - Navbar: Responsive navigation bar with links to all pages and a shopping cart icon.
   - Footer: Include links to important pages, social media icons, and copyright information.
   - Product Card: Reusable component to display product image, name, price, and "Add to Cart" button.
   - Cart Item: Component to display individual items in the cart with options to update quantity or remove.
   - Hero Banner: Full-width banner for the homepage with a call-to-action button.
   - *Search Bar*: Allow users to search for products by name or category.

4. State Management:
   - Use React Context API or Zustand to manage global state for the shopping cart.
   - Ensure the cart state persists across page reloads using localStorage.

5. API Integration:
   - Fetch product data from a mock API or a CMS (e.g., Strapi, Contentful).
   - Integrate a payment gateway (e.g., Stripe) for handling payments.
   - Implement user authentication (e.g., Firebase or Auth0) for user accounts.

6. Styling:
   - Use Tailwind CSS for all styling. Ensure the design is responsive and mobile-friendly.
   - Include dark mode support using Tailwind's dark mode utility.

7. *SEO and Performance Optimization:
   - Add dynamic meta tags for each page using Next.js's Head component.
   - Optimize images using Next.js's built-in Image component.
   - Implement lazy loading for images and components.

8. *Deployment:
   - Generate a deployment script for Vercel or Netlify.
   - Include environment variable configuration for API keys and other sensitive data.

9. Testing:
   - Add unit tests for critical components using Jest and React Testing Library.
   - Include end-to-end tests using Cypress.

10. Documentation:
    - Provide a README file with instructions for setting up the project locally, running tests, and deploying the website.

Please generate the necessary code, files, and folder structure for the above requirements. Include comments in the code to explain key functionality and best practices.